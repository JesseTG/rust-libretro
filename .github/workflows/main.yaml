name: CI

on:
  push:
    paths-ignore:
        - ".github/workflows/release.yaml"
        - "media/*"
        - "**.md"
  pull_request:
    paths-ignore:
        - ".github/workflows/release.yaml"
        - "media/*"
        - "**.md"

jobs:
  rustfmt:
    name: Check rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - run: cargo fmt -- --check

  clippy:
    name: Run Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: host
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: actions-rs-plus/clippy-check@main
        with:
          args: --all-features

  docs:
    name: Generate docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: host
      - run: cargo doc --all-features --document-private-items
      - name: Add docs to archive
        working-directory: target/doc
        run: |
          tar cvf ../../rust-libretro-docs.tar .
          gzip ../../rust-libretro-docs.tar
      - uses: actions/upload-artifact@v3
        with:
          name: rust-libretro-docs
          path: rust-libretro-docs.tar.gz
          if-no-files-found: error

  test_and_build:
    name: Test and build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - stable
          - beta
          - nightly
          - macos-amd64
          - macos-aarch64
          - win32
          - win64

        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
            prefix: lib
            name: linux-amd64
            ext: so

          - build: beta
            os: ubuntu-latest
            rust: beta
            prefix: lib
            name: linux-amd64_rust-beta
            ext: so

          - build: nightly
            os: ubuntu-latest
            rust: nightly
            prefix: lib
            name: linux-amd64_rust-nightly
            ext: so

          - build: macos-amd64
            os: macos-latest
            rust: stable
            prefix: lib
            name: macos-amd64
            ext: dylib

          - build: macos-aarch64
            os: macos-latest
            rust: stable
            prefix: lib
            name: macos-aarch64
            target: aarch64-apple-darwin
            ext: dylib

          - build: win32
            os: windows-latest
            rust: stable-i686
            name: windows-32bit
            clang-platform: x86
            target: i686-pc-windows-msvc
            ext: dll

          - build: win64
            os: windows-latest
            rust: stable-x86_64
            name: windows-amd64
            ext: dll

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.name }}

      - name: MSVC linker args
        # the MSVC linker will scream at us otherwise when trying to build the tests for `rust-libretro`,
        # because in that case `__retro_init_core` will not have been exported by a core implementation.
        run: |
          echo "RUSTFLAGS=-Clink-arg=/FORCE:UNRESOLVED" >> $env:GITHUB_ENV
          echo "RUSTDOCFLAGS=-Clink-arg=/FORCE:UNRESOLVED" >> $env:GITHUB_ENV
          echo "LIBCLANG_PATH=$((Get-Command clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-latest'

      - name: Set env for win32
        run: |
          choco upgrade llvm --forcex86 -y --no-progress --allow-downgrade --force --force-dependencies
          echo "LIBCLANG_PATH=C:\Program Files (x86)\LLVM\bin\" >> $env:GITHUB_ENV
          echo "CARGO_BUILD_TARGET=i686-pc-windows-msvc" >> $env:GITHUB_ENV
        if: matrix.build == 'win32'

      - name: Set env for macOS
        run: brew install coreutils
        if: matrix.os == 'macos-latest'

      - name: Set env for macos-aarch64
        run: echo "CARGO_BUILD_TARGET=aarch64-apple-darwin" >> $GITHUB_ENV
        if: matrix.build == 'macos-aarch64'

      - run: cargo test --workspace --verbose
        if: matrix.build != 'macos-aarch64'
      - run: cargo test --workspace --verbose --no-default-features
        if: matrix.build != 'macos-aarch64'
      - run: cargo test --workspace --verbose --all-features
        if: matrix.build != 'macos-aarch64'

      - name: Extract example names and their required features
        id: examples
        shell: bash
        run: |
          echo "value<<EOF" >> $GITHUB_OUTPUT
          cargo metadata --format-version 1 --no-deps | jq -r "
            .packages[].targets[]
              | select(.kind[] | contains(\"example\"))
              | \"--example \(.name) --features '\(.[\"required-features\"] | join(\" \"))'\"
          " >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build the examples
        shell: bash
        run: |
          while IFS= read -r line; do
            cmd="cargo build $line"
            echo "Executing \"$cmd\""
            eval $cmd
          done <<< "${{ steps.examples.outputs.value }}"

      - run: cargo build -p rust-libretro-example-core

      - name: Remove library prefixes
        working-directory: target/debug/
        run: |
          shopt -s nullglob
          for file in ${{ matrix.prefix }}*.${{ matrix.ext }} examples/${{ matrix.prefix }}*.${{ matrix.ext }};
          do dir=$(dirname $file)
            name=$(basename $file)
            mv "$file" "${dir}/${name#${{ matrix.prefix }}}"
          done;
        if: matrix.prefix != '' && matrix.os != 'windows-latest'

      - name: Compress Artifacts
        shell: bash
        id: compression
        run: |
          base_dir=$(pwd)
          shopt -s nullglob

          file=rust-libretro-${{ matrix.name }}.tar
          cd ${{ format('target/{0}/debug', env.CARGO_BUILD_TARGET) }}

          tar cvf $file \
            --exclude='examples/*-????????????????.${{ matrix.ext }}' \
            *.${{ matrix.ext }} \
            examples/*.${{ matrix.ext }}
          gzip $file

          echo "file=$(realpath $file.gz --relative-to=$base_dir)" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        with:
          name: rust-libretro-${{ matrix.name }}
          path: ${{ steps.compression.outputs.file }}
          if-no-files-found: error
